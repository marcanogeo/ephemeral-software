---
const refs = [
    { href: '/', label: 'Home' },
    { href: '/about/', label: 'About' },
    { href: '/services/', label: 'Services' },
    { href: '/blog/', label: 'Blog' },
    { href: '/contact/', label: 'Contact' },
];

const items = refs.map(ref => ({
    href: ref.href,
    label: ref.label,
}));
---

<!-- Desktop Navigation -->
<div class="hidden md:flex items-center space-x-8">
    {items.map(item => (
        <a 
            href={item.href} 
            class="text-gray-700 hover:text-blue-600 cursor-pointer transition-colors duration-200 font-medium py-2 px-3 rounded-md"
        >
            {item.label}
        </a>
    ))}
</div>

<!-- Mobile Navigation -->
<div class="md:hidden">
    <button 
        id="mobile-menu-button"
        class="text-gray-700 hover:text-blue-600 focus:outline-none focus:text-blue-600 p-2"
        aria-label="Toggle mobile menu"
    >
        <!-- Hamburger Icon -->
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
    </button>
    
    <!-- Mobile Menu Dropdown -->
    <div 
        id="mobile-menu"
        class="absolute top-full left-0 right-0 bg-white shadow-lg border-t border-gray-200 hidden z-50"
    >
        <div class="px-4 py-2 space-y-1">
            {items.map(item => (
                <a 
                    href={item.href} 
                    class="block text-gray-700 hover:text-blue-600 hover:bg-blue-50 cursor-pointer transition-colors duration-200 font-medium py-3 px-3 rounded-md"
                >
                    {item.label}
                </a>
            ))}
        </div>
    </div>
</div>

<script>
    // Mobile menu toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
            
            // Close mobile menu when clicking outside
            document.addEventListener('click', (event) => {
                const target = event.target as Element;
                if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
                    mobileMenu.classList.add('hidden');
                }
            });
            
            // Close mobile menu when clicking on a link
            mobileMenu.addEventListener('click', (event) => {
                const target = event.target as Element;
                if (target.tagName === 'A') {
                    mobileMenu.classList.add('hidden');
                }
            });
        }
    });
</script>

<style>
    /* Asegurar que los enlaces sean clickeables */
    nav a {
        position: relative;
        z-index: 10;
        pointer-events: auto;
    }
    
    /* Prevenir que otros elementos interfieran */
    nav {
        pointer-events: auto;
    }
    
    /* Mobile menu positioning */
    #mobile-menu {
        transform: translateY(0);
        transition: all 0.3s ease-in-out;
    }
    
    /* Smooth transitions for mobile menu */
    #mobile-menu.hidden {
        opacity: 0;
        transform: translateY(-10px);
    }
    
    #mobile-menu:not(.hidden) {
        opacity: 1;
        transform: translateY(0);
    }
    
    /* Ensure mobile menu appears above other content */
    .md\:hidden {
        position: relative;
    }
</style>